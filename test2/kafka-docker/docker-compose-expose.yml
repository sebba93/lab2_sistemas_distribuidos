version: '3.8'
services:
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
     - "2181:2181"
    container_name: zookeeper_cont
    networks:
      - producer_consumer_layer
  kafka:
    image: wurstmeister/kafka
    container_name: kafka_cont
    ports:
     - "9092:9092"
    expose:
     - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "topic_test:1:1"
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - producer_consumer_layer
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --topic topic_test --describe"]
      interval: 5s
      timeout: 5s
      retries: 15

  python-producer:
    build: ./python-script
    depends_on:
      kafka:
        condition: service_healthy
    container_name: prod_layer
    networks:
      - producer_consumer_layer

  python-consumer:
    build: ./mongodb
    depends_on:
      - mongodb
    container_name: cons_layer
    networks:
      - producer_consumer_layer

  mongodb:
    image: "mongo:latest"
    ports:
      - "27017:27017"
    container_name: db_layer
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - producer_consumer_layer
  
networks:
  producer_consumer_layer:
    name: prod_cons_layer
